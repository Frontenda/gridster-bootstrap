{"name":"gridster-bootstrap","tagline":"Gridster layouts rendered responsively in Bootstrap","body":"### An attempt to generate boostrap-based responsive layouts using [gridster.js](https://github.com/ducksboard/gridster.js). Check out the **[demo](https://rawgithub.com/ncthis/gridster-bootstrap/master/demo/index.html)**.\r\n\r\n#Set up\r\n1. For the moment, we need underscore.js as a dependency. So you'll need to add that to your project.\r\n    ```sh\r\n    \tbower install underscore\r\n    ```\r\n\r\n2. Then simply include the `gridster-bootstrap.js` to your **bootrap enabled** project, and you're good to go.\r\n\r\n#Usage\r\n1. Initialise your gridster layout, do your magic, and serialise it like this:\r\n    ```\r\n    var serialized = gridster.serialize();\r\n    ```\r\n\r\n2. Pass your serialized gridster layout to a new `bsgridster` object:\r\n    ```\r\n    var bootstrapLayout = new bsgridster(serialized, unitHeight, boxClass);\r\n    ```\r\n\tAs you can see, `bsgridster` constructor takes 3 arguments.\r\n\t* `serialized` - your gridster serialzation from step 1.\r\n\t* `unitHeight` (optional - defaults to `50`) - a `Number` value depicting how tall a single box should be, in pixels.\r\n\t* `boxClass` (optional) - a string for the name of a custom css that would be appended to all boxes.\r\n3. Render the HTML for the layout\r\n\r\n\t```js\r\n\tbootstrapLayout.getHtml();\r\n\t```\r\n\t\r\n4. Profit!\r\n\r\n#Example\r\n```js\r\nvar b = new bsgridster(s, 50, 'graybox');\r\nvar v = b.getHtml();\r\ndocument.getElementById('myContainer').innerHTML = v;\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}